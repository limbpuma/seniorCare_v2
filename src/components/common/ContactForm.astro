---
import Button from "./Button.astro";

type FormSize = "large" | "medium" | "small";

interface Props {
  class?: string;
  title: string;
  inputFields: {
    type: string;
    placeholder: string;
  }[];
  textareaPlaceholder: string;
  buttonText: string;
  size?: FormSize;
  image?: string;
}

const {
  class: className,
  title,
  inputFields,
  textareaPlaceholder,
  buttonText,
  size = "large",
  image,
} = Astro.props;

const sizeClasses = {
  large: "max-w-lg w-full px-6 sm:px-8 md:px-10 py-10 sm:py-12 md:py-14",
  medium: "max-w-md w-full px-4 sm:px-6 md:px-8 py-8 sm:py-10 md:py-12",
  small: "max-w-sm w-full px-3 sm:px-4 md:px-6 py-6 sm:py-8 md:py-10",
};

const titleClasses = {
  large: "text-ag-h4 sm:text-ag-h3 md:text-ag-h2 mb-6 sm:mb-8 md:mb-10",
  medium: "text-ag-h5 sm:text-ag-h4 md:text-ag-h3 mb-4 sm:mb-6 md:mb-8",
  small: "text-ag-body-text sm:text-ag-h5 md:text-ag-h4 mb-3 sm:mb-4 md:mb-6",
};

const spacingClasses = {
  large: "space-y-6 sm:space-y-7 md:space-y-8",
  medium: "space-y-4 sm:space-y-5 md:space-y-6",
  small: "space-y-3 sm:space-y-4 md:space-y-5",
};

const buttonClasses = {
  large: "mt-8 sm:mt-10 md:mt-12",
  medium: "mt-6 sm:mt-8 md:mt-10",
  small: "mt-4 sm:mt-6 md:mt-8",
};

const inputClasses = "w-full px-4 py-2 bg-inherit border-t-0 border-x-0 border-b border-primary text-primary-dark focus:outline-none text-ag-body-text font-ag-body-text";

const getTextareaRows = () => {
  if (size === "small") return "3";
  if (size === "medium") return "4";
  return "6";
};
---

<div class="relative">
  <form
    id="contact-form"
    class={`bg-soft-orange mx-auto flex flex-col justify-between shadow-lg rounded-lg md:mb-8 ${sizeClasses[size]} ${className}`}
  >
    {size === "small" && image && (
      <div class="w-full h-32 sm:h-40 md:h-48 overflow-hidden mb-4 rounded-t-lg">
        <img
          src={image}
          alt="Form header"
          class="w-full h-full object-cover"
          loading="lazy"
        />
      </div>
    )}
    <h2
      class={`text-ag-body-text sm:text-ag-h5 md:text-ag-h4 lg:text-[32px] xl:text-[34px] font-ag-h4 mb-2 sm:mb-3 md:mb-4 leading-tight text-center text-deep-blue uppercase ${titleClasses[size]}`}
      set:html={title}
    />
    <div class={spacingClasses[size]}>      {inputFields.map((input) => {
        const { type, placeholder } = input;
        let name = type;
        if (type === "tel") name = "phone";
        if (type === "text" && placeholder.toLowerCase().includes("name"))
          name = "name";
        return (
          <div class="wcag-tooltip">
            <input
              type={type as astroHTML.JSX.HTMLInputTypeAttribute}
              name={name}
              placeholder={placeholder}
              class={inputClasses}
              required
              data-tooltip={
                type === "tel" ? "Bitte geben Sie Ihre Telefonnummer im Format +49 XXX XXXXXXX ein" :
                type === "email" ? "Wir benötigen Ihre E-Mail-Adresse, um Ihnen zu antworten" :
                type === "text" && placeholder.toLowerCase().includes("name") ? "Ihr vollständiger Name hilft uns bei der persönlichen Betreuung" :
                ""
              }
            />
          </div>
        );
      })}
      <div class="wcag-tooltip">
        <select name="subject" class={inputClasses} required
          data-tooltip="Wählen Sie das Thema aus, das am besten zu Ihrer Anfrage passt">
          <option value="">Betreff auswählen</option>
          <option value="general">Allgemeine Anfrage</option>
          <option value="services">Leistungen</option>
          <option value="appointment">Terminvereinbarung</option>
          <option value="emergency">Notfall</option>        </select>
      </div>
      <div class="wcag-tooltip">
        <textarea
          name="message"
          placeholder={textareaPlaceholder}
          rows={getTextareaRows()}
          class={inputClasses}
          required
          data-tooltip="Beschreiben Sie Ihre Anfrage detailliert. Je mehr Informationen Sie uns geben, desto besser können wir Ihnen helfen."
        ></textarea>
      </div>
    </div>
    <Button
      type="submit"
      variant="primary"
      fullWidth
      class={buttonClasses[size]}
    >
      {buttonText}
    </Button>
    <div class="flex items-start mt-4">
      <input
        type="checkbox"
        id="consent"
        name="consent"
        class="mt-1 mr-2"
        required
      />
      <label for="consent" class="text-ag-body-text font-ag-body-text mb-6 sm:mb-8 md:mb-10 max-w-3xl mx-auto">
        Ich stimme der Verwendung meiner Daten zu. Mehr Infos in der <a
          href="privacypolicy"
          class="text-primary underline">Datenschutz</a
        >.
      </label>
    </div>
  </form>  <div
    id="message-modal"
    class="fixed inset-0 bg-black bg-opacity-50 items-center justify-center z-50 hidden"
  >
    <div class="bg-white p-6 rounded-lg shadow-lg max-w-md w-full mx-4">
      <h4 id="modal-title" class="text-ag-h5 sm:text-ag-h4 md:text-ag-h3 font-ag-h3 mb-4"></h4>
      <p id="modal-message" class="text-ag-body-text font-ag-body-text mb-6"></p>
      <button
        id="close-modal"
        class="w-full px-4 py-2 bg-deep-blue hover:bg-soft-blue text-white rounded-full transition-colors duration-300 focus:outline-none font-ag-button-text text-ag-button-text"
      >
        Schließen
      </button>
    </div>
  </div>
</div>

<style>
  /* Contact form specific styles - focus styles now handled by WCAG 2.4.11 implementation */
  #message-modal.show {
    display: flex !important;
  }
</style>

<script>
  const form = document.getElementById("contact-form") as HTMLFormElement;
  const messageModal = document.getElementById("message-modal") as HTMLDivElement;
  const modalTitle = document.getElementById("modal-title") as HTMLHeadingElement;
  const modalMessage = document.getElementById("modal-message") as HTMLParagraphElement;
  const closeModalButton = document.getElementById("close-modal") as HTMLButtonElement;
  const consentCheckbox = document.getElementById("consent") as HTMLInputElement;

  function isValidGermanPhoneNumber(phone: string): boolean {
    const germanPhoneRegex = /^(\+49|0)[1-9]\d{1,14}$/;
    return germanPhoneRegex.test(phone.replace(/\s/g, ""));
  }
  form.addEventListener("submit", async (e) => {
    e.preventDefault();

    if (!consentCheckbox.checked) {
      showModal(
        "Fehler",
        "Bitte bestätigen Sie die Datenschutzerklärung, um fortzufahren."
      );
      return;
    }

    const formData = new FormData(form);
    const phone = formData.get("phone") as string;

    if (phone && !isValidGermanPhoneNumber(phone)) {
      showModal(
        "Ungültige Telefonnummer",
        "Bitte geben Sie eine gültige deutsche Telefonnummer ein."
      );
      return;
    }

    // Preparar datos para el backend PHP
    const contactData = {
      name: formData.get("name"),
      email: formData.get("email"),
      phone: formData.get("phone"),
      subject: formData.get("subject"),
      message: formData.get("message")
    };

    try {
      const response = await fetch("http://localhost/AdminHub-PHP/src/api/contact.php", {
        method: "POST",
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        },
        body: JSON.stringify(contactData),
      });

      const result = await response.json();

      if (result.success) {
        showModal(
          "Nachricht gesendet!",
          "Vielen Dank für Ihre Kontaktaufnahme. Wir werden uns bald bei Ihnen melden."
        );
        form.reset();
      } else {
        const errorMessage = result.errors 
          ? (Array.isArray(result.errors) ? result.errors.join(", ") : result.errors)
          : result.error || "Unbekannter Fehler";
        showModal(
          "Fehler",
          "Beim Senden der Nachricht ist ein Fehler aufgetreten: " + errorMessage
        );
      }
    } catch (error) {
      showModal(
        "Fehler",
        "Ein unerwarteter Fehler ist aufgetreten. Bitte versuchen Sie es später erneut."
      );
    }
  });
  function showModal(title: string, message: string) {
    modalTitle.textContent = title;
    modalMessage.textContent = message;
    messageModal.classList.add("show");
    messageModal.classList.remove("hidden");
  }

  closeModalButton.addEventListener("click", () => {
    messageModal.classList.remove("show");
    messageModal.classList.add("hidden");
  });

  messageModal.addEventListener("click", (e) => {
    if (e.target === messageModal) {
      messageModal.classList.remove("show");
      messageModal.classList.add("hidden");
    }
  });
</script>