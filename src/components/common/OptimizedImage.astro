---
/**
 * OptimizedImage - Componente de imagen optimizada con Astro:assets
 * Usa Image de Astro para optimización automática, lazy loading y responsive images
 */
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  src: string | ImageMetadata;
  alt: string;
  width?: number;
  height?: number;
  class?: string;
  loading?: 'lazy' | 'eager';
  sizes?: string;
  quality?: 'low' | 'mid' | 'high' | 'max';
  format?: 'avif' | 'webp' | 'jpeg' | 'jpg' | 'png' | 'svg';
  fetchpriority?: 'high' | 'low' | 'auto';
}

const {
  src,
  alt,
  width = 800,
  height = 600,
  class: className = '',
  loading = 'lazy',
  sizes = '(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw',
  quality = 'high',
  format = 'webp',
  fetchpriority = 'auto'
} = Astro.props;

// Para imágenes en /public (rutas que empiezan con /), usar img nativo
// Para ImageMetadata importado, usar Image de Astro
const isPublicAsset = typeof src === 'string' && src.startsWith('/');
---

{isPublicAsset ? (
  <img
    src={src as string}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={loading}
    fetchpriority={fetchpriority}
    decoding="async"
  />
) : typeof src === 'string' ? (
  <!-- URL externa -->
  <img
    src={src as string}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={loading}
    fetchpriority={fetchpriority}
    decoding="async"
  />
) : (
  <!-- ImageMetadata importado -->
  <Image
    src={src as ImageMetadata}
    alt={alt}
    width={width}
    height={height}
    class={className}
    loading={loading}
    sizes={sizes}
    quality={quality}
    format={format}
    fetchpriority={fetchpriority}
    decoding="async"
  />
)}