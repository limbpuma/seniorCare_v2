---
/**
 * AccessibilityControls - Componente limpio y funcional
 */
interface Props {
  class?: string;
}

const { class: className } = Astro.props;
---

<!-- Widget de Accesibilidad -->
<div 
  class={`accessibility-widget fixed bottom-20 right-5 z-50 font-sans ${className || ''}`} 
  role="region" 
  aria-label="Barrierefreiheitsoptionen"
>
  <!-- Panel de controles -->
  <div 
    class="accessibility-panel absolute bottom-20 right-0 bg-white rounded-2xl shadow-2xl border border-gray-200 min-w-80 max-w-96 transform transition-all duration-300 ease-in-out opacity-0 invisible translate-y-4 scale-95" 
    id="accessibilityPanel"
    role="dialog" 
    aria-labelledby="accessibility-title" 
    aria-modal="false"
  >
    <!-- Encabezado -->
    <div class="flex justify-between items-center p-5 border-b border-gray-200 bg-gradient-to-r from-slate-50 to-gray-50 rounded-t-2xl">
      <h3 id="accessibility-title" class="text-lg font-semibold text-gray-800 m-0">
        Barrierefreiheit
      </h3>
      <button 
        id="closeAccessibilityPanel" 
        class="bg-transparent border-none text-gray-600 p-2 rounded-lg hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200"
        aria-label="Panel schlie√üen"
        title="Barrierefreiheitspanel schlie√üen"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Estado -->
    <div class="px-5 py-3 bg-blue-50 border-b border-gray-100">
      <div class="flex items-center gap-2 text-sm text-blue-700">
        <span class="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></span>
        <span id="accessibility-status">0 Funktionen aktiv</span>
      </div>
    </div>
    
    <!-- Controles -->
    <div class="p-4 space-y-2">
      <!-- Text Spacing Control -->
      <button 
        id="toggleTextSpacing" 
        class="accessibility-feature-btn w-full p-3 border-2 border-gray-200 rounded-xl bg-white flex items-center gap-3 text-left hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
        aria-label="Textabstand anpassen f√ºr bessere Lesbarkeit"
        aria-pressed="false"
        aria-keyshortcuts="Alt+T"
        data-feature="textSpacing"
      >
        <div class="flex-shrink-0 w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
          <span class="text-xl">üî§</span>
        </div>
        <div class="flex-1 min-w-0">
          <div class="font-medium text-gray-900 text-sm">Text Spacing</div>
          <div class="text-xs text-gray-600">Bessere Lesbarkeit</div>
        </div>
        <div class="flex-shrink-0">
          <span class="feature-status px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">AUS</span>
        </div>
      </button>
      
      <!-- High Contrast Control -->
      <button 
        id="highContrastMode" 
        class="accessibility-feature-btn w-full p-3 border-2 border-gray-200 rounded-xl bg-white flex items-center gap-3 text-left hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
        aria-label="Hohen Kontrast aktivieren f√ºr bessere Sichtbarkeit"
        aria-pressed="false"
        aria-keyshortcuts="Alt+C"
        data-feature="highContrast"
      >
        <div class="flex-shrink-0 w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center">
          <span class="text-xl">üé®</span>
        </div>
        <div class="flex-1 min-w-0">
          <div class="font-medium text-gray-900 text-sm">Hoher Kontrast</div>
          <div class="text-xs text-gray-600">St√§rkere Farben</div>
        </div>
        <div class="flex-shrink-0">
          <span class="feature-status px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">AUS</span>
        </div>
      </button>
      
      <!-- Focus Indicators Control -->
      <button 
        id="focusIndicators" 
        class="accessibility-feature-btn w-full p-3 border-2 border-gray-200 rounded-xl bg-white flex items-center gap-3 text-left hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
        aria-label="Fokusindikatoren verst√§rken f√ºr bessere Navigation"
        aria-pressed="false"
        aria-keyshortcuts="Alt+F"
        data-feature="focusIndicators"
      >
        <div class="flex-shrink-0 w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
          <span class="text-xl">üéØ</span>
        </div>
        <div class="flex-1 min-w-0">
          <div class="font-medium text-gray-900 text-sm">Fokus verbessern</div>
          <div class="text-xs text-gray-600">Klarere Navigation</div>
        </div>
        <div class="flex-shrink-0">
          <span class="feature-status px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">AUS</span>
        </div>
      </button>

      <!-- Font Size Control -->
      <button 
        id="toggleFontSize" 
        class="accessibility-feature-btn w-full p-3 border-2 border-gray-200 rounded-xl bg-white flex items-center gap-3 text-left hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
        aria-label="Schriftgr√∂√üe erh√∂hen f√ºr bessere Lesbarkeit"
        aria-pressed="false"
        aria-keyshortcuts="Alt+S"
        data-feature="fontSize"
      >
        <div class="flex-shrink-0 w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center">
          <span class="text-xl">üìù</span>
        </div>
        <div class="flex-1 min-w-0">
          <div class="font-medium text-gray-900 text-sm">Text vergr√∂√üern</div>
          <div class="text-xs text-gray-600">Gr√∂√üere Schrift</div>
        </div>
        <div class="flex-shrink-0">
          <span class="feature-status px-2 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full">Normal</span>
        </div>
      </button>
    </div>
    
    <!-- Botones de acci√≥n -->
    <div class="px-5 pb-5 pt-2 border-t border-gray-100">
      <div class="flex gap-3">
        <button 
          id="resetAccessibility" 
          class="flex-1 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-gray-500 transition-colors duration-200"
          aria-label="Alle Einstellungen zur√ºcksetzen"
          title="Alle Barrierefreiheitseinstellungen zur√ºcksetzen"
        >
          üîÑ Zur√ºcksetzen
        </button>
        
        <a 
          href="/accessibility" 
          class="flex-1 px-4 py-2 text-sm font-medium text-blue-700 bg-blue-100 rounded-lg text-center hover:bg-blue-200 focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200"
          aria-label="Zur Barrierefreiheitsseite"
          aria-keyshortcuts="Alt+A"
          title="Vollst√§ndige Informationen zur Barrierefreiheit (Alt+A)"
        >
          ‚ÑπÔ∏è Mehr Infos
        </a>
      </div>
    </div>
  </div>

  <!-- Bot√≥n flotante -->
  <button 
    id="toggleAccessibilityPanel" 
    class="accessibility-toggle-btn w-16 h-16 bg-gradient-to-br from-blue-600 to-blue-700 rounded-full shadow-xl border-2 border-white text-white flex items-center justify-center hover:scale-105 hover:shadow-2xl focus:outline-none focus:ring-4 focus:ring-blue-300/50 transition-all duration-300 ease-out"
    aria-label="Barrierefreiheitsoptionen √∂ffnen"
    aria-expanded="false"
    aria-controls="accessibilityPanel"
    title="Barrierefreiheitsoptionen √∂ffnen/schlie√üen"
  >
    <svg class="w-8 h-8 drop-shadow-sm" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
      <circle cx="12" cy="12" r="11" stroke="currentColor" stroke-width="1.5" fill="none"/>
      <path fill="currentColor" d="M12 6.5c0.83 0 1.5-0.67 1.5-1.5s-0.67-1.5-1.5-1.5-1.5 0.67-1.5 1.5 0.67 1.5 1.5 1.5zm-1.77 1.23c-0.8 0.35-1.38 1.09-1.52 2.02L8.29 12H5c-0.55 0-1 0.45-1 1s0.45 1 1 1h3.69l-0.51 3.03c-0.09 0.55 0.28 1.07 0.83 1.16 0.06 0.01 0.11 0.01 0.17 0.01 0.48 0 0.9-0.35 0.98-0.84L10.72 14h2.56l0.56 2.36c0.11 0.48 0.54 0.82 1.02 0.82 0.08 0 0.16-0.01 0.24-0.03 0.56-0.13 0.9-0.69 0.77-1.25L15.31 13H19c0.55 0 1-0.45 1-1s-0.45-1-1-1h-4.09l-0.49-2.39c-0.2-1-1.09-1.76-2.16-1.76h-0.53c-0.55 0-1 0.45-1 1s0.45 1 1 1h0.53l0.28 1.37L12.9 10H11.1l-0.39-1.96c0.1-0.05 0.21-0.08 0.32-0.08h0.53c0.04 0 0.08-0.01 0.11-0.01z"/>
    </svg>
  </button>
</div>

<script>
  class AccessibilityManager {
    public features: {
      textSpacing: boolean;
      highContrast: boolean;
      focusIndicators: boolean;
      fontSize: string;
    };
    public panel: HTMLElement | null;
    public toggleButton: HTMLElement | null;
    public statusElement: HTMLElement | null;
    public isVisible: boolean;

    constructor() {
      this.features = {
        textSpacing: false,
        highContrast: false,
        focusIndicators: false,
        fontSize: 'normal'
      };
      this.panel = null;
      this.toggleButton = null;
      this.statusElement = null;
      this.isVisible = false;
      this.init();
    }

    init(): void {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.setupElements());
      } else {
        this.setupElements();
      }
    }

    setupElements(): void {
      this.panel = document.getElementById('accessibilityPanel');
      this.toggleButton = document.getElementById('toggleAccessibilityPanel');
      this.statusElement = document.getElementById('accessibility-status');
      
      if (!this.panel || !this.toggleButton) return;
      
      this.bindEvents();
      this.loadSavedPreferences();
      this.updateStatus();
    }

    bindEvents(): void {
      // Toggle panel
      this.toggleButton?.addEventListener('click', () => this.togglePanel());
      
      // Close panel
      document.getElementById('closeAccessibilityPanel')?.addEventListener('click', () => this.hidePanel());
      
      // Feature toggles
      document.getElementById('toggleTextSpacing')?.addEventListener('click', () => 
        this.toggleFeature('textSpacing'));
      document.getElementById('highContrastMode')?.addEventListener('click', () => 
        this.toggleFeature('highContrast'));
      document.getElementById('focusIndicators')?.addEventListener('click', () => 
        this.toggleFeature('focusIndicators'));
      document.getElementById('toggleFontSize')?.addEventListener('click', () => 
        this.toggleFontSize());
      
      // Reset button
      document.getElementById('resetAccessibility')?.addEventListener('click', () => 
        this.resetAllPreferences());
      
      // Keyboard shortcuts
      document.addEventListener('keydown', (e: KeyboardEvent) => this.handleKeyboardShortcuts(e));
      
      // Outside click
      document.addEventListener('click', (e: MouseEvent) => this.handleOutsideClick(e));
      
      // Escape key
      document.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Escape' && this.isPanelVisible()) {
          this.hidePanel();
        }
      });
    }

    togglePanel(): void {
      this.isPanelVisible() ? this.hidePanel() : this.showPanel();
    }

    showPanel(): void {
      if (!this.panel) return;
      
      this.panel.classList.remove('opacity-0', 'invisible', 'translate-y-4', 'scale-95');
      this.panel.classList.add('opacity-100', 'visible', 'translate-y-0', 'scale-100');
      
      this.toggleButton?.setAttribute('aria-expanded', 'true');
      this.toggleButton?.setAttribute('aria-label', 'Barrierefreiheitsoptionen schlie√üen');
      this.isVisible = true;
    }

    hidePanel(): void {
      if (!this.panel) return;
      
      this.panel.classList.add('opacity-0', 'invisible', 'translate-y-4', 'scale-95');
      this.panel.classList.remove('opacity-100', 'visible', 'translate-y-0', 'scale-100');
      
      this.toggleButton?.setAttribute('aria-expanded', 'false');
      this.toggleButton?.setAttribute('aria-label', 'Barrierefreiheitsoptionen √∂ffnen');
      this.isVisible = false;
    }

    isPanelVisible(): boolean {
      return this.panel?.classList.contains('opacity-100') || false;
    }

    toggleFeature(feature: 'textSpacing' | 'highContrast' | 'focusIndicators'): void {
      this.features[feature] = !this.features[feature];
      this.applyFeature(feature);
      this.updateFeatureButton(feature);
      this.savePreferences();
      this.updateStatus();
    }

    toggleFontSize(): void {
      const sizes = ['normal', 'large'];
      const currentIndex = sizes.indexOf(this.features.fontSize);
      const nextIndex = (currentIndex + 1) % sizes.length;
      
      this.features.fontSize = sizes[nextIndex];
      this.applyFontSize(this.features.fontSize);
      this.updateFontSizeButton();
      this.savePreferences();
      this.updateStatus();
    }

    applyFeature(feature: 'textSpacing' | 'highContrast' | 'focusIndicators'): void {
      const isEnabled = this.features[feature];
      
      switch (feature) {
        case 'textSpacing':
          this.applyTextSpacing(isEnabled);
          break;
        case 'highContrast':
          this.applyHighContrast(isEnabled);
          break;
        case 'focusIndicators':
          this.applyFocusIndicators(isEnabled);
          break;
      }
    }

    applyTextSpacing(enabled: boolean): void {
      const styleId = 'enhanced-text-spacing';
      
      if (enabled) {
        if (!document.getElementById(styleId)) {
          const style = document.createElement('style');
          style.id = styleId;
          style.textContent = `
            p, div, span, a, li, td, th, label, input, textarea, select, button {
              line-height: 1.75 !important;
              letter-spacing: 0.08em !important;
              word-spacing: 0.15em !important;
            }
            h1, h2, h3, h4, h5, h6 {
              line-height: 1.4 !important;
              letter-spacing: 0.05em !important;
              margin-bottom: 1.2em !important;
            }
            p {
              margin-bottom: 1.5em !important;
            }
            li {
              margin-bottom: 0.5em !important;
            }
          `;
          document.head.appendChild(style);
        }
      } else {
        document.getElementById(styleId)?.remove();
      }
    }

    applyHighContrast(enabled: boolean): void {
      const styleId = 'enhanced-high-contrast';
      
      if (enabled) {
        document.documentElement.classList.add('high-contrast-mode');
        
        if (!document.getElementById(styleId)) {
          const style = document.createElement('style');
          style.id = styleId;
          style.textContent = `
            /* TODAS las im√°genes y videos SIN filtros */
            .high-contrast-mode img,
            .high-contrast-mode video,
            .high-contrast-mode picture,
            .high-contrast-mode figure,
            .high-contrast-mode iframe,
            .high-contrast-mode canvas,
            .high-contrast-mode svg,
            .high-contrast-mode [class*="gallery"],
            .high-contrast-mode [class*="mosaic"] {
              filter: none !important;
              -webkit-filter: none !important;
            }
            
            /* Forzar colores de alto contraste en texto */
            .high-contrast-mode p,
            .high-contrast-mode div:not([class*="gallery"]):not([class*="mosaic"]),
            .high-contrast-mode span,
            .high-contrast-mode li,
            .high-contrast-mode td,
            .high-contrast-mode th,
            .high-contrast-mode label {
              color: #000000 !important;
              background-color: #ffffff !important;
            }
            
            /* Headers visibles */
            .high-contrast-mode h1,
            .high-contrast-mode h2,
            .high-contrast-mode h3,
            .high-contrast-mode h4,
            .high-contrast-mode h5,
            .high-contrast-mode h6 {
              color: #000000 !important;
              background-color: #ffffff !important;
              font-weight: bold !important;
            }
            
            /* Enlaces destacados */
            .high-contrast-mode a {
              color: #0000ff !important;
              background-color: #ffff99 !important;
              text-decoration: underline !important;
              font-weight: 600 !important;
              padding: 1px 3px !important;
              border-radius: 2px !important;
            }
            
            /* Botones */
            .high-contrast-mode button {
              border: 2px solid #000000 !important;
              background-color: #ffffff !important;
              color: #000000 !important;
              font-weight: bold !important;
            }
            
            .high-contrast-mode button:hover,
            .high-contrast-mode button:focus {
              background-color: #000000 !important;
              color: #ffffff !important;
            }
            
            /* Elementos de formulario */
            .high-contrast-mode input,
            .high-contrast-mode select,
            .high-contrast-mode textarea {
              border: 2px solid #000000 !important;
              background-color: #ffffff !important;
              color: #000000 !important;
            }
            
            /* Footer */
            .high-contrast-mode footer {
              background: #000000 !important;
            }
            
            .high-contrast-mode footer * {
              color: #ffffff !important;
              background-color: transparent !important;
            }
            
            .high-contrast-mode footer a {
              color: #ffff00 !important;
              background-color: #000080 !important;
            }
          `;
          document.head.appendChild(style);
        }
      } else {
        document.documentElement.classList.remove('high-contrast-mode');
        document.getElementById(styleId)?.remove();
      }
    }

    applyFocusIndicators(enabled: boolean): void {
      const styleId = 'enhanced-focus-styles';
      
      if (enabled) {
        if (!document.getElementById(styleId)) {
          const style = document.createElement('style');
          style.id = styleId;
          style.textContent = `
            *:focus {
              outline: 4px solid #ff6600 !important;
              outline-offset: 3px !important;
              box-shadow: 0 0 0 7px rgba(255, 102, 0, 0.4) !important;
            }
            
            a:focus {
              background-color: rgba(255, 102, 0, 0.15) !important;
              text-decoration: underline !important;
              font-weight: 600 !important;
            }
            
            button:focus {
              transform: scale(1.02) !important;
              transition: all 0.2s ease !important;
            }
            
            input:focus, textarea:focus, select:focus {
              border-color: #ff6600 !important;
            }
          `;
          document.head.appendChild(style);
        }
      } else {
        document.getElementById(styleId)?.remove();
      }
    }

    applyFontSize(size: string): void {
      const styleId = 'enhanced-font-size';
      const existingStyle = document.getElementById(styleId);
      if (existingStyle) {
        existingStyle.remove();
      }
      
      if (size !== 'normal') {
        const style = document.createElement('style');
        style.id = styleId;
        const multiplier = '1.1'; // 10% increase
        
        style.textContent = `
          p, div, span, a, li, td, th, label, button, input, textarea, select,
          h1, h2, h3, h4, h5, h6, .text-xs, .text-sm, .text-base, .text-lg, .text-xl {
            font-size: ${multiplier}em !important;
          }
          
          h1, .text-4xl, .text-5xl, .text-6xl {
            font-size: ${parseFloat(multiplier) * 2.25}em !important;
          }
          
          h2, .text-3xl {
            font-size: ${parseFloat(multiplier) * 1.875}em !important;
          }
          
          h3, .text-2xl {
            font-size: ${parseFloat(multiplier) * 1.5}em !important;
          }
          
          h4, .text-xl {
            font-size: ${parseFloat(multiplier) * 1.25}em !important;
          }
          
          .text-sm, small {
            font-size: ${parseFloat(multiplier) * 0.875}em !important;
          }
        `;
        
        document.head.appendChild(style);
      }
    }

    updateFeatureButton(feature: 'textSpacing' | 'highContrast' | 'focusIndicators'): void {
      const button = document.querySelector(`[data-feature="${feature}"]`) as HTMLElement;
      const status = button?.querySelector('.feature-status') as HTMLElement;
      const isEnabled = this.features[feature];
      
      if (button && status) {
        button.setAttribute('aria-pressed', isEnabled.toString());
        status.textContent = isEnabled ? 'EIN' : 'AUS';
        
        if (isEnabled) {
          button.classList.add('bg-blue-50', 'border-blue-500');
          button.classList.remove('border-gray-200');
          status.classList.add('bg-blue-200', 'text-blue-800');
          status.classList.remove('bg-gray-100', 'text-gray-600');
        } else {
          button.classList.remove('bg-blue-50', 'border-blue-500');
          button.classList.add('border-gray-200');
          status.classList.remove('bg-blue-200', 'text-blue-800');
          status.classList.add('bg-gray-100', 'text-gray-600');
        }
      }
    }

    updateFontSizeButton(): void {
      const button = document.querySelector(`[data-feature="fontSize"]`) as HTMLElement;
      const status = button?.querySelector('.feature-status') as HTMLElement;
      
      if (button && status) {
        const labels = {
          normal: 'Normal',
          large: 'Gro√ü'
        };
        
        status.textContent = labels[this.features.fontSize as keyof typeof labels] || 'Normal';
        
        if (this.features.fontSize !== 'normal') {
          button.classList.add('bg-orange-50', 'border-orange-500');
          button.classList.remove('border-gray-200');
          status.classList.add('bg-orange-200', 'text-orange-800');
          status.classList.remove('bg-gray-100', 'text-gray-600');
        } else {
          button.classList.remove('bg-orange-50', 'border-orange-500');
          button.classList.add('border-gray-200');
          status.classList.remove('bg-orange-200', 'text-orange-800');
          status.classList.add('bg-gray-100', 'text-gray-600');
        }
      }
    }

    updateStatus(): void {
      const activeCount = Object.values(this.features).filter(value => 
        typeof value === 'boolean' ? value : value !== 'normal'
      ).length;
      if (this.statusElement) {
        this.statusElement.textContent = `${activeCount} ${activeCount === 1 ? 'Funktion aktiv' : 'Funktionen aktiv'}`;
      }
    }

    resetAllPreferences(): void {
      // Reset boolean features
      Object.keys(this.features).forEach(feature => {
        if (feature === 'fontSize') {
          this.features.fontSize = 'normal';
          this.applyFontSize('normal');
          this.updateFontSizeButton();
        } else {
          const featureKey = feature as 'textSpacing' | 'highContrast' | 'focusIndicators';
          this.features[featureKey] = false;
          this.applyFeature(featureKey);
          this.updateFeatureButton(featureKey);
        }
      });
      this.savePreferences();
      this.updateStatus();
    }

    savePreferences(): void {
      try {
        localStorage.setItem('accessibility-preferences', JSON.stringify(this.features));
      } catch (e) {
        console.warn('Could not save accessibility preferences:', e);
      }
    }

    loadSavedPreferences(): void {
      try {
        const saved = localStorage.getItem('accessibility-preferences');
        if (saved) {
          const preferences = JSON.parse(saved);
          Object.keys(this.features).forEach(feature => {
            if (feature === 'fontSize') {
              this.features.fontSize = preferences.fontSize || 'normal';
              this.applyFontSize(this.features.fontSize);
              this.updateFontSizeButton();
            } else {
              const featureKey = feature as 'textSpacing' | 'highContrast' | 'focusIndicators';
              if (preferences[featureKey]) {
                this.features[featureKey] = true;
                this.applyFeature(featureKey);
                this.updateFeatureButton(featureKey);
              }
            }
          });
        }
      } catch (e) {
        console.warn('Could not load accessibility preferences:', e);
      }
    }

    handleKeyboardShortcuts(e: KeyboardEvent): void {
      if (e.altKey) {
        switch (e.key.toLowerCase()) {
          case 't':
            e.preventDefault();
            this.toggleFeature('textSpacing');
            break;
          case 'c':
            e.preventDefault();
            this.toggleFeature('highContrast');
            break;
          case 'f':
            e.preventDefault();
            this.toggleFeature('focusIndicators');
            break;
          case 's':
            e.preventDefault();
            this.toggleFontSize();
            break;
          case 'a':
            e.preventDefault();
            window.location.href = '/accessibility';
            break;
        }
      }
    }

    handleOutsideClick(e: MouseEvent): void {
      const target = e.target as HTMLElement;
      const controls = target?.closest('[role="region"][aria-label="Barrierefreiheitsoptionen"]');
      
      if (!controls && this.isPanelVisible()) {
        this.hidePanel();
      }
    }
  }

  // Inicializaci√≥n
  let accessibilityManager: AccessibilityManager | null = null;
  
  function initAccessibility(): void {
    if (!accessibilityManager) {
      accessibilityManager = new AccessibilityManager();
      if (typeof window !== 'undefined') {
        (window as any).accessibilityManager = accessibilityManager;
      }
    }
  }

  // Inicializar
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAccessibility);
  } else {
    initAccessibility();
  }
  
  // Re-inicializar en navegaci√≥n Astro
  document.addEventListener('astro:page-load', initAccessibility);
</script>