---
interface Props {
  class?: string;
}

const { class: className } = Astro.props;
---

<div class={`fixed bottom-5 right-5 z-50 font-sans ${className || ''}`} role="region" aria-label="Barrierefreiheitsoptionen">  <!-- Panel de controles principal -->
  <div 
    class="absolute bottom-20 right-0 bg-white rounded-2xl shadow-2xl border border-gray-200 min-w-80 max-w-96 opacity-0 invisible transform translate-y-2 scale-95 transition-all duration-200 ease-out" 
    id="accessibilityPanel"
    role="dialog" 
    aria-labelledby="accessibility-title" 
    aria-modal="false">
    
    <!-- Encabezado del panel -->
    <div class="flex justify-between items-center p-5 border-b border-gray-200 bg-gradient-to-r from-slate-50 to-gray-50 rounded-t-2xl">
      <h3 id="accessibility-title" class="text-lg font-semibold text-gray-800 m-0">Barrierefreiheit</h3>
      <button 
        id="closeAccessibilityPanel" 
        class="bg-transparent border-none text-gray-600 p-2 rounded-lg cursor-pointer focus:outline-none focus:ring-2 focus:ring-blue-500 focus:bg-gray-100 transition-colors duration-200"
        aria-label="Panel schlie√üen"
        title="Barrierefreiheitspanel schlie√üen">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Estado y ayuda -->
    <div class="px-5 py-3 bg-blue-50 border-b border-gray-100">
      <div class="flex items-center gap-2 text-sm text-blue-700">
        <span class="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></span>
        <span id="accessibility-status">0 Funktionen aktiv</span>
      </div>
    </div>
    
    <!-- Controles principales -->
    <div class="p-5 space-y-3">
      <button 
        id="toggleTextSpacing" 
        class="w-full p-4 border-2 border-gray-200 rounded-xl bg-white flex items-center gap-4 cursor-pointer text-left focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200" 
        aria-label="Textabstand anpassen f√ºr bessere Lesbarkeit"
        aria-pressed="false"
        aria-keyshortcuts="Alt+T"
        data-feature="textSpacing">
        <div class="flex-shrink-0 w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
          <span class="text-2xl">üî§</span>
        </div>
        <div class="flex-1 min-w-0">
          <div class="font-medium text-gray-900">Text Spacing</div>
          <div class="text-sm text-gray-600">Verbessert die Lesbarkeit</div>
        </div>
        <div class="flex-shrink-0">
          <span class="px-3 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full feature-status">AUS</span>
        </div>
      </button>
      
      <button 
        id="highContrastMode" 
        class="w-full p-4 border-2 border-gray-200 rounded-xl bg-white flex items-center gap-4 cursor-pointer text-left focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200"
        aria-label="Hohen Kontrast aktivieren f√ºr bessere Sichtbarkeit"
        aria-pressed="false"
        aria-keyshortcuts="Alt+C"
        data-feature="highContrast">
        <div class="flex-shrink-0 w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
          <span class="text-2xl">üé®</span>
        </div>
        <div class="flex-1 min-w-0">
          <div class="font-medium text-gray-900">Hoher Kontrast</div>
          <div class="text-sm text-gray-600">Verbessert die Sichtbarkeit</div>
        </div>
        <div class="flex-shrink-0">
          <span class="px-3 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full feature-status">AUS</span>
        </div>
      </button>
      
      <button 
        id="focusIndicators" 
        class="w-full p-4 border-2 border-gray-200 rounded-xl bg-white flex items-center gap-4 cursor-pointer text-left focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors duration-200"
        aria-label="Fokusindikatoren verst√§rken f√ºr bessere Navigation"
        aria-pressed="false"
        aria-keyshortcuts="Alt+F"
        data-feature="focusIndicators">
        <div class="flex-shrink-0 w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
          <span class="text-2xl">üéØ</span>
        </div>
        <div class="flex-1 min-w-0">
          <div class="font-medium text-gray-900">Fokus verbessern</div>
          <div class="text-sm text-gray-600">Klarere Navigation</div>
        </div>
        <div class="flex-shrink-0">
          <span class="px-3 py-1 text-xs font-medium bg-gray-100 text-gray-600 rounded-full feature-status">AUS</span>
        </div>
      </button>
    </div>
    
    <!-- Botones de acci√≥n -->
    <div class="px-5 pb-5 pt-2 border-t border-gray-100">
      <div class="flex gap-3">
        <button 
          id="resetAccessibility" 
          class="flex-1 px-4 py-2 text-sm font-medium text-gray-700 bg-gray-100 rounded-lg focus:outline-none focus:ring-2 focus:ring-gray-500 transition-colors duration-200"
          aria-label="Alle Einstellungen zur√ºcksetzen"
          title="Alle Barrierefreiheitseinstellungen zur√ºcksetzen">
          üîÑ Zur√ºcksetzen
        </button>
        
        <a 
          href="/accessibility" 
          class="flex-1 px-4 py-2 text-sm font-medium text-blue-700 bg-blue-100 rounded-lg text-center focus:outline-none focus:ring-2 focus:ring-blue-500 transition-colors duration-200"
          aria-label="Zur Barrierefreiheitsseite"
          aria-keyshortcuts="Alt+A"
          title="Vollst√§ndige Informationen zur Barrierefreiheit (Alt+A)">
          ‚ÑπÔ∏è Mehr Infos
        </a>
      </div>
    </div>
  </div>
  
  <!-- Bot√≥n flotante mejorado -->
  <button 
    id="toggleAccessibilityPanel" 
    class="w-16 h-16 bg-gradient-to-br from-blue-600 to-blue-700 rounded-full shadow-xl flex items-center justify-center text-white cursor-pointer focus:outline-none focus:ring-4 focus:ring-blue-300 focus:ring-opacity-50 transition-all duration-200 border-2 border-white"
    aria-label="Barrierefreiheitsoptionen √∂ffnen"
    aria-expanded="false"
    aria-controls="accessibilityPanel"
    title="Barrierefreiheitsoptionen √∂ffnen/schlie√üen">
    <span class="text-3xl filter drop-shadow-sm">‚ôø</span>
  </button>
</div>

<script>
  class AccessibilityManager {
    constructor() {
      this.features = {
        textSpacing: false,
        highContrast: false,
        focusIndicators: false
      };
      this.panel = null;
      this.toggleButton = null;
      this.statusElement = null;
      this.init();
    }

    init() {
      // Wait for DOM to be ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.setupElements());
      } else {
        this.setupElements();
      }
    }

    setupElements() {
      this.panel = document.getElementById('accessibilityPanel');
      this.toggleButton = document.getElementById('toggleAccessibilityPanel');
      this.statusElement = document.getElementById('accessibility-status');
      
      if (!this.panel || !this.toggleButton) return;
      
      this.bindEvents();
      this.loadSavedPreferences();
      this.updateStatus();
    }

    bindEvents() {
      // Toggle panel
      this.toggleButton.addEventListener('click', () => this.togglePanel());
      
      // Close panel
      const closeBtn = document.getElementById('closeAccessibilityPanel');
      if (closeBtn) {
        closeBtn.addEventListener('click', () => this.hidePanel());
      }
      
      // Feature buttons
      document.getElementById('toggleTextSpacing')?.addEventListener('click', () => 
        this.toggleFeature('textSpacing'));
      document.getElementById('highContrastMode')?.addEventListener('click', () => 
        this.toggleFeature('highContrast'));
      document.getElementById('focusIndicators')?.addEventListener('click', () => 
        this.toggleFeature('focusIndicators'));
      
      // Reset button
      document.getElementById('resetAccessibility')?.addEventListener('click', () => 
        this.resetAllPreferences());
      
      // Keyboard shortcuts
      document.addEventListener('keydown', (e) => this.handleKeyboardShortcuts(e));
      
      // Close on outside click
      document.addEventListener('click', (e) => this.handleOutsideClick(e));
      
      // Close on escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isPanelVisible()) {
          this.hidePanel();
        }
      });
    }

    togglePanel() {
      if (this.isPanelVisible()) {
        this.hidePanel();
      } else {
        this.showPanel();
      }
    }    showPanel() {
      if (!this.panel) return;
      
      this.panel.classList.remove('opacity-0', 'invisible', 'translate-y-2', 'scale-95');
      this.panel.classList.add('opacity-100', 'visible', 'translate-y-0', 'scale-100');
      
      this.toggleButton?.setAttribute('aria-expanded', 'true');
      this.toggleButton?.setAttribute('aria-label', 'Barrierefreiheitsoptionen schlie√üen');
    }

    hidePanel() {
      if (!this.panel) return;
      
      this.panel.classList.add('opacity-0', 'invisible', 'translate-y-2', 'scale-95');
      this.panel.classList.remove('opacity-100', 'visible', 'translate-y-0', 'scale-100');
      
      this.toggleButton?.setAttribute('aria-expanded', 'false');
      this.toggleButton?.setAttribute('aria-label', 'Barrierefreiheitsoptionen √∂ffnen');
    }

    isPanelVisible() {
      return this.panel?.classList.contains('opacity-100') || false;
    }

    toggleFeature(feature) {
      this.features[feature] = !this.features[feature];
      this.applyFeature(feature);
      this.updateFeatureButton(feature);
      this.savePreferences();
      this.updateStatus();
    }

    applyFeature(feature) {
      const isEnabled = this.features[feature];
      
      switch (feature) {
        case 'textSpacing':
          this.applyTextSpacing(isEnabled);
          break;
        case 'highContrast':
          this.applyHighContrast(isEnabled);
          break;
        case 'focusIndicators':
          this.applyFocusIndicators(isEnabled);
          break;
      }
    }

    applyTextSpacing(enabled) {
      if (enabled) {
        document.documentElement.style.setProperty('--text-spacing-multiplier', '1.5');
        document.body.style.lineHeight = '1.8';
        document.body.style.letterSpacing = '0.05em';
        document.body.style.wordSpacing = '0.1em';
      } else {
        document.documentElement.style.removeProperty('--text-spacing-multiplier');
        document.body.style.lineHeight = '';
        document.body.style.letterSpacing = '';
        document.body.style.wordSpacing = '';
      }
    }

    applyHighContrast(enabled) {
      if (enabled) {
        document.documentElement.classList.add('high-contrast-mode');
        document.documentElement.style.filter = 'contrast(150%) brightness(1.1)';
      } else {
        document.documentElement.classList.remove('high-contrast-mode');
        document.documentElement.style.filter = '';
      }
    }

    applyFocusIndicators(enabled) {
      const styleId = 'enhanced-focus-styles';
      let style = document.getElementById(styleId);
      
      if (enabled) {
        if (!style) {
          style = document.createElement('style');
          style.id = styleId;
          document.head.appendChild(style);
        }
        style.textContent = `
          *:focus {
            outline: 3px solid #ff6600 !important;
            outline-offset: 2px !important;
            box-shadow: 0 0 0 5px rgba(255, 102, 0, 0.3) !important;
          }
          
          button:focus, a:focus, input:focus, textarea:focus, select:focus {
            outline: 3px solid #ff6600 !important;
            outline-offset: 2px !important;
            box-shadow: 0 0 0 5px rgba(255, 102, 0, 0.3) !important;
          }
        `;
        document.documentElement.classList.add('enhanced-focus-mode');
      } else {
        style?.remove();
        document.documentElement.classList.remove('enhanced-focus-mode');
      }
    }

    updateFeatureButton(feature) {
      const button = document.querySelector(`[data-feature="${feature}"]`);
      const status = button?.querySelector('.feature-status');
      const isEnabled = this.features[feature];
      
      if (button && status) {
        button.setAttribute('aria-pressed', isEnabled.toString());
        status.textContent = isEnabled ? 'EIN' : 'AUS';
        
        if (isEnabled) {
          button.classList.add('bg-blue-50', 'border-blue-500');
          button.classList.remove('border-gray-200');
          status.classList.add('bg-blue-200', 'text-blue-800');
          status.classList.remove('bg-gray-100', 'text-gray-600');
        } else {
          button.classList.remove('bg-blue-50', 'border-blue-500');
          button.classList.add('border-gray-200');
          status.classList.remove('bg-blue-200', 'text-blue-800');
          status.classList.add('bg-gray-100', 'text-gray-600');
        }
      }
    }

    updateStatus() {
      const activeCount = Object.values(this.features).filter(Boolean).length;
      if (this.statusElement) {
        this.statusElement.textContent = `${activeCount} ${activeCount === 1 ? 'Funktion aktiv' : 'Funktionen aktiv'}`;
      }
    }

    resetAllPreferences() {
      Object.keys(this.features).forEach(feature => {
        this.features[feature] = false;
        this.applyFeature(feature);
        this.updateFeatureButton(feature);
      });
      this.savePreferences();
      this.updateStatus();
    }

    savePreferences() {
      try {
        localStorage.setItem('accessibility-preferences', JSON.stringify(this.features));
      } catch (e) {
        console.warn('Could not save accessibility preferences:', e);
      }
    }

    loadSavedPreferences() {
      try {
        const saved = localStorage.getItem('accessibility-preferences');
        if (saved) {
          const preferences = JSON.parse(saved);
          Object.keys(this.features).forEach(feature => {
            if (preferences[feature]) {
              this.features[feature] = true;
              this.applyFeature(feature);
              this.updateFeatureButton(feature);
            }
          });
        }
      } catch (e) {
        console.warn('Could not load accessibility preferences:', e);
      }
    }

    handleKeyboardShortcuts(e) {
      if (e.altKey) {
        switch (e.key.toLowerCase()) {
          case 't':
            e.preventDefault();
            this.toggleFeature('textSpacing');
            break;
          case 'c':
            e.preventDefault();
            this.toggleFeature('highContrast');
            break;
          case 'f':
            e.preventDefault();
            this.toggleFeature('focusIndicators');
            break;
          case 'a':
            e.preventDefault();
            window.location.href = '/accessibility';
            break;
        }
      }
    }

    handleOutsideClick(e) {
      const target = e.target;
      const controls = target.closest('[role="region"][aria-label="Barrierefreiheitsoptionen"]');
      
      if (!controls && this.isPanelVisible()) {
        this.hidePanel();
      }
    }
  }

  // Initialize accessibility manager
  let accessibilityManager = null;
  
  function initAccessibility() {
    if (!accessibilityManager) {
      accessibilityManager = new AccessibilityManager();
      window.accessibilityManager = accessibilityManager;
    }
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAccessibility);
  } else {
    initAccessibility();
  }
  
  // Re-initialize on Astro page navigation
  document.addEventListener('astro:page-load', initAccessibility);
</script>
